<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://ganhan999.github.io/</id>
    <title>Gridea</title>
    <updated>2021-04-23T11:56:49.786Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://ganhan999.github.io/"/>
    <link rel="self" href="https://ganhan999.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://ganhan999.github.io/images/avatar.png</logo>
    <icon>https://ganhan999.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[671、二叉树中第二小的节点]]></title>
        <id>https://ganhan999.github.io/post/671、二叉树中第二小的节点/</id>
        <link href="https://ganhan999.github.io/post/671、二叉树中第二小的节点/">
        </link>
        <updated>2021-04-23T11:59:35.000Z</updated>
        <content type="html"><![CDATA[<h1 id="题目">题目</h1>
<p>给定一个非空特殊的二叉树，每个节点都是正数，并且每个节点的子节点数量只能为2或0。如果一个节点有两个子节点的话，那么该节点的值等于两个子节点中较小的一个。</p>
<p>更正式地说，root.val = min(root.left.val, root.right.val) 总成立。</p>
<p>给出这样的一个二叉树，你需要输出所有节点中的第二小的值。如果第二小的值不存在的话，输出 -1 。</p>
<p>示例 1：<br>
输入：root = [2,2,5,null,null,5,7]<br>
输出：5<br>
解释：最小的值是 2 ，第二小的值是 5 。</p>
<p>示例 2：<br>
输入：root = [2,2,2]<br>
输出：-1<br>
解释：最小的值是 2, 但是不存在第二小的值。</p>
<p>&quot;&quot;&quot;&quot;&quot;&quot;</p>
<h1 id="本体思路">本体思路</h1>
<p>实际上我们通过题意可以得知，最小的元素一定的根节点，所以我们只要找到比根节点大的节点，<br>
直接返回就行了，更不用继续遍历当前节点下面的子节点，因为子节点的值不可能比它还小。</p>
<h1 id="大神做法1">大神做法1：</h1>
<pre><code class="language-python">class Solution:
    def findSecondMinimumValue(self, root: TreeNode) -&gt; int:
        &quot;&quot;&quot;前序遍历&quot;&quot;&quot;
        def helper(root, val):
            if not root:
                return -1

            if root.val &gt; val:#如果是 222 的情况 那么就会子节点还是会返回-1
                return root.val
            left = helper(root.left, val)
            right = helper(root.right, val)
            if left &lt; 0: return right
            if right &lt; 0: return left
            return min(left, right)

        return helper(root, root.val)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[661、图片平滑器]]></title>
        <id>https://ganhan999.github.io/post/665、非递减数列/</id>
        <link href="https://ganhan999.github.io/post/665、非递减数列/">
        </link>
        <updated>2021-04-22T11:59:35.000Z</updated>
        <content type="html"><![CDATA[<h1 id="题目">题目</h1>
<p>给你一个长度为n的整数数组，请你判断在 最多 改变1 个元素的情况下，该数组能否变成一个非递减数列。<br>
我们是这样定义一个非递减数列的：对于数组中任意的i (0 &lt;= i &lt;= n-2)，总满足 nums[i] &lt;= nums[i + 1]。</p>
<p>示例 1:<br>
输入: nums = [4,2,3]<br>
输出: true<br>
解释: 你可以通过把第一个4变成1来使得它成为一个非递减数列。</p>
<p>示例 2:<br>
输入: nums = [4,2,1]<br>
输出: false<br>
解释: 你不能在只改变一个元素的情况下将其变为非递减数列。</p>
<p>&quot;&quot;&quot;&quot;&quot;&quot;</p>
<h1 id="本体思路">本体思路</h1>
<p>当 i &gt; 1 且 nums[i] &lt; nums[i - 2]时，我们无法调整 nums[i - 1]，我们只能调整 nums[i] 到 nums[i - 1]。</p>
<h1 id="大神做法1">大神做法1：</h1>
<pre><code class="language-python">class Solution(object):
    def checkPossibility(self, nums):
        &quot;&quot;&quot;
        :type nums: List[int]
        :rtype: bool
        &quot;&quot;&quot;
        N = len(nums)
        count = 0
        for i in range(1, N):
            if nums[i] &lt; nums[i - 1]:
                count += 1
                if i == 1 or nums[i] &gt;= nums[i - 2]:
                    nums[i - 1] = nums[i]
                else:
                    nums[i] = nums[i - 1]
        return count &lt;= 1
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[661、图片平滑器]]></title>
        <id>https://ganhan999.github.io/post/661、图片平滑器/</id>
        <link href="https://ganhan999.github.io/post/661、图片平滑器/">
        </link>
        <updated>2021-04-21T11:59:35.000Z</updated>
        <content type="html"><![CDATA[<h1 id="题目">题目</h1>
<p>包含整数的二维矩阵 M 表示一个图片的灰度。你需要设计一个平滑器来让每一个单元的灰度成为平均灰度 (向下舍入) ，平均灰度的计算是周围的8个单元和它本身的值求平均，如果周围的单元格不足八个，则尽可能多的利用它们。</p>
<p>示例 1:<br>
输入:<br>
[[1,1,1],<br>
[1,0,1],<br>
[1,1,1]]<br>
输出:<br>
[[0, 0, 0],<br>
[0, 0, 0],<br>
[0, 0, 0]]<br>
解释:<br>
对于点 (0,0), (0,2), (2,0), (2,2): 平均(3/4) = 平均(0.75) = 0<br>
对于点 (0,1), (1,0), (1,2), (2,1): 平均(5/6) = 平均(0.83333333) = 0<br>
对于点 (1,1): 平均(8/9) = 平均(0.88888889) = 0</p>
<p>&quot;&quot;&quot;&quot;&quot;&quot;</p>
<h1 id="本体思路">本体思路</h1>
<p>对于矩阵中的每一个单元格，找所有 9 个包括它自身在内的紧邻的格子。<br>
然后，我们要将所有邻居的和保存在 ans[r][c] 中，同时记录邻居的数目 count。最终的答案就是和除以邻居数目。</p>
<h1 id="大神做法1">大神做法1：</h1>
<pre><code class="language-python">class Solution(object):
    def imageSmoother(self, M):
        R, C = len(M), len(M[0])
        ans = [[0] * C for _ in M]

        for r in range(R):
            for c in range(C):
                count = 0
                for nr in (r-1, r, r+1):
                    for nc in (c-1, c, c+1):
                        if 0 &lt;= nr &lt; R and 0 &lt;= nc &lt; C:
                            ans[r][c] += M[nr][nc]
                            count += 1
                ans[r][c] //= count
        return ans
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[657、机器人能否返回原点]]></title>
        <id>https://ganhan999.github.io/post/657、机器人能否返回原点/</id>
        <link href="https://ganhan999.github.io/post/657、机器人能否返回原点/">
        </link>
        <updated>2021-04-20T11:59:35.000Z</updated>
        <content type="html"><![CDATA[<h1 id="题目">题目</h1>
<p>在二维平面上，有一个机器人从原点 (0, 0) 开始。给出它的移动顺序，判断这个机器人在完成移动后是否在(0, 0) 处结束。<br>
移动顺序由字符串表示。字符 move[i] 表示其第 i 次移动。机器人的有效动作有R（右），L（左），U（上）和 D（下）。如果机器人在完成所有动作后返回原点，则返回 true。否则，返回 false。<br>
注意：机器人“面朝”的方向无关紧要。 “R” 将始终使机器人向右移动一次，“L” 将始终向左移动等。此外，假设每次移动机器人的移动幅度相同。</p>
<p>示例 1:<br>
输入: &quot;UD&quot;<br>
输出: true<br>
解释：机器人向上移动一次，然后向下移动一次。所有动作都具有相同的幅度，因此它最终回到它开始的原点。因此，我们返回 true。</p>
<p>示例 2:<br>
输入: &quot;LL&quot;<br>
输出: false<br>
解释：机器人向左移动两次。它最终位于原点的左侧，距原点有两次 “移动” 的距离。我们返回 false，因为它在移动结束时没有返回原点。</p>
<p>&quot;&quot;&quot;&quot;&quot;&quot;</p>
<h1 id="本体思路">本体思路</h1>
<p>我们只需按指令模拟机器人移动的坐标即可。起始时机器人的坐标为 (0,0)，在遍历完所有指令并对机器人进行移动之后，判断机器人的坐标是否为 (0,0) 即可。<br>
具体来说，我们用两个变量 x 和 y 来表示机器人当前所在的坐标为 (x,y)，起始时 x=0，y=0。接下来我们遍历指令并更新机器人的坐标：</p>
<p>如果指令是 U，则令 y=y-1<br>
如果指令是 D，则令 y=y+1<br>
如果指令是 L，则令 x=x-1<br>
如果指令是 R，则令 x=x+1<br>
最后判断 (x,y) 是否为 (0,0) 即可。</p>
<h1 id="大神做法1">大神做法1：</h1>
<pre><code class="language-python">class Solution(object):
    def judgeCircle(self, moves):
        x = y = 0
        for move in moves:
            if move == 'U': y -= 1
            elif move == 'D': y += 1
            elif move == 'L': x -= 1
            elif move == 'R': x += 1

        return x == y == 0
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[653. 两数之和 IV - 输入 BST]]></title>
        <id>https://ganhan999.github.io/post/653. 两数之和 IV - 输入 BST/</id>
        <link href="https://ganhan999.github.io/post/653. 两数之和 IV - 输入 BST/">
        </link>
        <updated>2021-04-19T11:59:35.000Z</updated>
        <content type="html"><![CDATA[<h1 id="题目">题目</h1>
<p>给定一个二叉搜索树和一个目标结果，如果 BST 中存在两个元素且它们的和等于给定的目标结果，则返回 true。</p>
<p>案例 1:</p>
<p>输入:<br>
5<br>
/ <br>
3   6<br>
/ \   <br>
2   4   7</p>
<p>Target = 9</p>
<p>输出: True</p>
<p>案例 2:</p>
<p>输入:<br>
5<br>
/ <br>
3   6<br>
/ \   <br>
2   4   7</p>
<p>Target = 28</p>
<p>输出: False</p>
<p>&quot;&quot;&quot;&quot;&quot;&quot;</p>
<h1 id="本体思路">本体思路</h1>
<p>二叉树中旬遍历得到有序数组 双指针查找</p>
<h1 id="大神做法1">大神做法1：</h1>
<pre><code class="language-python">class Solution:
    def findTarget(self, root: TreeNode, k: int) -&gt; bool:
        nums = []
        def mid_order(root):
            if root:
                mid_order(root.left)
                nums.append(root.val)
                mid_order(root.right)
        mid_order(root)
        l, r = 0, len(nums) - 1
        while l &lt; r:
            if nums[l] + nums[r] == k:
                return True
            elif nums[l] + nums[r] &gt; k:
                r -= 1
            else:
                l += 1
        return False
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[643、子数组最大平均数 I ]]></title>
        <id>https://ganhan999.github.io/post/643、子数组最大平均数 I /</id>
        <link href="https://ganhan999.github.io/post/643、子数组最大平均数 I /">
        </link>
        <updated>2021-04-17T11:59:35.000Z</updated>
        <content type="html"><![CDATA[<h1 id="题目">题目</h1>
<p>给定 n 个整数，找出平均数最大且长度为 k 的连续子数组，并输出该最大平均数。</p>
<p>示例：<br>
输入：[1,12,-5,-6,50,3], k = 4<br>
输出：12.75<br>
解释：最大平均数 (12-5-6+50)/4 = 51/4 = 12.75</p>
<p>&quot;&quot;&quot;&quot;&quot;&quot;</p>
<h1 id="本体思路">本体思路</h1>
<p>滑动窗口法</p>
<h1 id="大神做法1">大神做法1：</h1>
<pre><code class="language-python">class Solution:
    def findMaxAverage(self, nums: List[int], k: int) -&gt; float:
        maxTotal = total = sum(nums[:k])
        n = len(nums)

        for i in range(k, n):
            total = total - nums[i - k] + nums[i]
            maxTotal = max(maxTotal, total)

        return maxTotal / k
</code></pre>
<p>&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;</p>
<p>使用广度优先搜索计算二叉树的层平均值。从根节点开始搜索，每一轮遍历同一层的全部节点，<br>
计算该层的节点数以及该层的节点值之和，然后计算该层的平均值。</p>
<h1 id="大神做法2">大神做法2：</h1>
<pre><code class="language-python">class Solution:
    def averageOfLevels(self, root: TreeNode) -&gt; List[float]:
        averages = list()
        queue = collections.deque([root])
        while queue:
            total = 0
            size = len(queue)
            for _ in range(size):
                node = queue.popleft()
                total += node.val
                left, right = node.left, node.right
                if left:
                    queue.append(left)
                if right:
                    queue.append(right)
            averages.append(total / size)
        return averages
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[645、错误的集合]]></title>
        <id>https://ganhan999.github.io/post/645、错误的集合/</id>
        <link href="https://ganhan999.github.io/post/645、错误的集合/">
        </link>
        <updated>2021-04-17T11:59:35.000Z</updated>
        <content type="html"><![CDATA[<h1 id="题目">题目</h1>
<p>集合 s 包含从 1 到n的整数。不幸的是，因为数据错误，导致集合里面某一个数字复制了成了集合里面的另外一个数字的值，<br>
导致集合 丢失了一个数字 并且 有一个数字重复 。<br>
给定一个数组 nums 代表了集合 S 发生错误后的结果。<br>
请你找出重复出现的整数，再找到丢失的整数，将它们以数组的形式返回。</p>
<p>示例 1：<br>
输入：nums = [1,2,2,4]<br>
输出：[2,3]</p>
<p>示例 2：<br>
输入：nums = [1,1]<br>
输出：[1,2]</p>
<p>&quot;&quot;&quot;&quot;&quot;&quot;</p>
<h1 id="本体思路">本体思路</h1>
<p>重复的那个数：sum(nums) - sum(set(nums))<br>
缺失的那个数：sum(list(range(1, len(nums) + 1))) - sum(set(nums))</p>
<h1 id="大神做法1">大神做法1：</h1>
<pre><code class="language-python">class Solution:
    def findErrorNums(self, nums: List[int]) -&gt; List[int]:
        return [sum(nums) - sum(set(nums)), sum(list(range(1, len(nums) + 1))) - sum(set(nums))]
</code></pre>
<p>&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;</p>
<p>使用广度优先搜索计算二叉树的层平均值。从根节点开始搜索，每一轮遍历同一层的全部节点，<br>
计算该层的节点数以及该层的节点值之和，然后计算该层的平均值。</p>
<h1 id="大神做法2">大神做法2：</h1>
<pre><code class="language-python">class Solution:
    def averageOfLevels(self, root: TreeNode) -&gt; List[float]:
        averages = list()
        queue = collections.deque([root])
        while queue:
            total = 0
            size = len(queue)
            for _ in range(size):
                node = queue.popleft()
                total += node.val
                left, right = node.left, node.right
                if left:
                    queue.append(left)
                if right:
                    queue.append(right)
            averages.append(total / size)
        return averages
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[628、三个数的最大乘积]]></title>
        <id>https://ganhan999.github.io/post/637、二叉树的层平均值/</id>
        <link href="https://ganhan999.github.io/post/637、二叉树的层平均值/">
        </link>
        <updated>2021-04-16T11:59:35.000Z</updated>
        <content type="html"><![CDATA[<h1 id="题目">题目</h1>
<p>给定一个非空二叉树, 返回一个由每层节点平均值组成的数组。</p>
<p>示例 1：<br>
输入：<br>
3<br>
/ <br>
9  20<br>
/  <br>
15   7<br>
输出：[3, 14.5, 11]<br>
解释：<br>
第 0 层的平均值是 3 ,  第1层是 14.5 , 第2层是 11 。因此返回 [3, 14.5, 11] 。</p>
<p>&quot;&quot;&quot;&quot;&quot;&quot;</p>
<h1 id="本体思路">本体思路</h1>
<p>使用深度优先搜索计算二叉树的层平均值，需要维护两个数组，counts 用于存储二叉树的每一层的节点数，<br>
totals 用于存储二叉树的每一层的节点值之和。搜索过程中需要记录当前节点所在层，如果访问到的节点在第 i 层，<br>
则将counts[i] 的值加 1，并将该节点的值加到 totals[i]。</p>
<h1 id="大神做法1">大神做法1：</h1>
<pre><code class="language-python">class Solution:
    def averageOfLevels(self, root: TreeNode) -&gt; List[float]:
        def dfs(root: TreeNode, level: int):
            if not root:
                return
            if level &lt; len(totals):
                totals[level] += root.val
                counts[level] += 1
            else:
                totals.append(root.val)
                counts.append(1)
            dfs(root.left, level + 1)
            dfs(root.right, level + 1)

        counts = list()
        totals = list()
        dfs(root, 0)
        return [total / count for total, count in zip(totals, counts)]
</code></pre>
<p>&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;</p>
<p>使用广度优先搜索计算二叉树的层平均值。从根节点开始搜索，每一轮遍历同一层的全部节点，<br>
计算该层的节点数以及该层的节点值之和，然后计算该层的平均值。</p>
<h1 id="大神做法2">大神做法2：</h1>
<pre><code class="language-python">class Solution:
    def averageOfLevels(self, root: TreeNode) -&gt; List[float]:
        averages = list()
        queue = collections.deque([root])
        while queue:
            total = 0
            size = len(queue)
            for _ in range(size):
                node = queue.popleft()
                total += node.val
                left, right = node.left, node.right
                if left:
                    queue.append(left)
                if right:
                    queue.append(right)
            averages.append(total / size)
        return averages
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java内存分析 转载]]></title>
        <id>https://ganhan999.github.io/post/Java内存分析/</id>
        <link href="https://ganhan999.github.io/post/Java内存分析/">
        </link>
        <updated>2021-04-16T02:18:25.000Z</updated>
        <content type="html"><![CDATA[<p>这篇文章将简单的说明下当我们运行Java程序时JVM（Java虚拟机）的内存分配情况。</p>
<p>首先我们先来感观的认识下几个名词：</p>
<ul>
<li>**栈：**一般来说，基本数据类型直接在栈中分配空间，局部变量（在方法代码段中定义的变量）也在栈中直接分配空间，当局部变量所在方法执行完成之后该空间便立刻被JVM回收，还有一种是引用数据类型，即我们通常所说的需要用关键字new创建出来的对象所对应的引用也是在栈空间中，此时，JVM在栈空间中给对象引用分配了一个地址空间（相当于一个门牌号，通过这个门牌号就可以找到你家），在堆空间中给该引用的对象分配一个空间，栈空间中的地址引用指向了堆空间中的对象区（通过门牌号找住址）；</li>
<li>**堆：**一般用来存放用关键字new出来的数据。</li>
</ul>
<p>接下来我们再通过一段程序来直观感受下程序运行时JVM的内存情况，</p>
<p>[<img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" loading="lazy">](javascript:void(0)😉</p>
<pre><code> 1 package demo;
 2 
 3 public class Student {
 4     private String name;
 5     private int age;
 6 
 7     public void study() {
 8         System.out.println(&quot;I love study!&quot;);
 9     }
10 
11     public String getName() {
12         return name;
13     }
14 
15     public void setName(String name) {
16         this.name = name;
17     }
18 
19     public int getAge() {
20         return age;
21     }
22 
23     public void setAge(int age) {
24         this.age = age;
25     }
26 }
</code></pre>
<p>[<img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" loading="lazy">](javascript:void(0)😉</p>
<p>[<img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" loading="lazy">](javascript:void(0)😉</p>
<pre><code> 1 package demo;
 2 
 3 public class StudentDemo {
 4     public static void main(String[] args) {
 5         Student student = new Student();
 6 
 7         System.out.println(student.getName() + &quot;:&quot; + student.getAge());
 8         student.setName(&quot;John&quot;);
 9         student.setAge(23);
10         System.out.println(student.getName() + &quot;:&quot; + student.getAge());
11         
12         student.study();
13         
14         Student student2 = student;
15         student2.setName(&quot;Jack&quot;);
16         student2.setAge(25);
17         System.out.println(student2.getName() + &quot;:&quot; + student2.getAge());
18         System.out.println(student.getName() + &quot;:&quot; + student.getAge());
19     }
20 }
</code></pre>
<p>[<img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" loading="lazy">](javascript:void(0)😉</p>
<p>当我们运行程序时，JVM会把Student类与StudentDemo类编译完然后加载到JVM中一个叫<strong>方法区</strong>的地方，类的成员变量与成员方法也被加载到方法区中，此时内存模型如下</p>
<figure data-type="image" tabindex="1"><img src="https://images2015.cnblogs.com/blog/1023471/201610/1023471-20161003105022942-1624159483.png" alt="img" loading="lazy"></figure>
<p>可以看到study方法右边各有一个16进制的标记，而name与age变量没有，这是因为每个对象都有各自的成员变量，而类中的成员方法却可以被每个对象所共用，为了节省内存空间，JVM为方法分配了该标记（也叫内存地址）便于每个new出来的对象查找调用，接着JVM会自动寻找main方法，在栈中为main方法申请一个空间，这个过程也叫入栈，然后执行我们Student类中第5行代码</p>
<figure data-type="image" tabindex="2"><img src="https://images2015.cnblogs.com/blog/1023471/201706/1023471-20170628153219774-236253981.png" alt="img" loading="lazy"></figure>
<p>这时候，JVM在堆空间中分配一块内存给Student对象，并为其分配一个内存地址（如果对象的成员变量没有赋值，则JVM会为变量赋初始值），在栈中分配一块内存空间用于指向堆空间中的Student对象区的内存地址，此时内存模型如下</p>
<figure data-type="image" tabindex="3"><img src="https://images2015.cnblogs.com/blog/1023471/201610/1023471-20161003105825942-1129813995.png" alt="img" loading="lazy"></figure>
<p>接着看代码第8行与第9行</p>
<figure data-type="image" tabindex="4"><img src="https://images2015.cnblogs.com/blog/1023471/201706/1023471-20170628152809383-1580114598.png" alt="img" loading="lazy"></figure>
<p>程序为student对象的成员变量赋值，JVM会根据student所指向的地址在堆内存中寻找Student类的变量，并为变量赋新的值</p>
<figure data-type="image" tabindex="5"><img src="https://images2015.cnblogs.com/blog/1023471/201610/1023471-20161003110601582-847575839.png" alt="img" loading="lazy"></figure>
<p>第12行</p>
<figure data-type="image" tabindex="6"><img src="https://images2015.cnblogs.com/blog/1023471/201706/1023471-20170628153013664-299357383.png" alt="img" loading="lazy"></figure>
<p>这时student对象调用study方法，JVM在栈空间中为study方法申请了一块内存空间</p>
<figure data-type="image" tabindex="7"><img src="https://images2015.cnblogs.com/blog/1023471/201610/1023471-20161003111014707-298237402.png" alt="img" loading="lazy"></figure>
<p>study方法执行完后，立即释放栈空间，代码第14行，</p>
<figure data-type="image" tabindex="8"><img src="https://images2015.cnblogs.com/blog/1023471/201706/1023471-20170628153044071-1135286478.png" alt="img" loading="lazy"></figure>
<p>student2对象的引用指向了student所指向的地址</p>
<figure data-type="image" tabindex="9"><img src="https://images2015.cnblogs.com/blog/1023471/201610/1023471-20161003132857082-1194767868.png" alt="img" loading="lazy"></figure>
<p>代码15与16行</p>
<figure data-type="image" tabindex="10"><img src="https://images2015.cnblogs.com/blog/1023471/201706/1023471-20170628153131133-2077229308.png" alt="img" loading="lazy"></figure>
<p>为student2的变量赋值，由于student2与student指向了同一个地方，所以这时student对象中变量的值也被改变</p>
<figure data-type="image" tabindex="11"><img src="https://images2015.cnblogs.com/blog/1023471/201610/1023471-20161003133148551-1299541357.png" alt="img" loading="lazy"></figure>
<p>到这，main方法中所有代码执行完毕，main方法所占用的栈空间也被回收，而堆空间等待GC回收</p>
<figure data-type="image" tabindex="12"><img src="https://images2015.cnblogs.com/blog/1023471/201610/1023471-20161003111448192-1689689689.png" alt="img" loading="lazy"></figure>
<p>代码执行结果如下：</p>
<pre><code>null:0
John:23
I love study!
Jack:25
Jack:25
</code></pre>
<p>写的较为简单，仅作为知识记录，欢迎指正！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[628、三个数的最大乘积]]></title>
        <id>https://ganhan999.github.io/post/628、三个数的最大乘积/</id>
        <link href="https://ganhan999.github.io/post/628、三个数的最大乘积/">
        </link>
        <updated>2021-04-15T10:59:35.000Z</updated>
        <content type="html"><![CDATA[<h1 id="题目">题目</h1>
<p>给你一个整型数组 nums ，在数组中找出由三个数组成的最大乘积，并输出这个乘积。</p>
<p>示例 1：<br>
输入：nums = [1,2,3]<br>
输出：6</p>
<p>示例 2：<br>
输入：nums = [1,2,3,4]<br>
输出：24</p>
<p>示例 3：<br>
输入：nums = [-1,-2,-3]<br>
输出：-6</p>
<p>&quot;&quot;&quot;&quot;&quot;&quot;</p>
<h1 id="本体思路">本体思路</h1>
<p>首先将数组排序。<br>
如果数组中全是非负数，则排序后最大的三个数相乘即为最大乘积；如果全是非正数，则最大的三个数相乘同样也为最大乘积。<br>
如果数组中有正数有负数，则最大乘积既可能是三个最大正数的乘积，也可能是两个最小负数（即绝对值最大）与最大正数的乘积。<br>
综上，我们在给数组排序后，分别求出三个最大正数的乘积，以及两个最小负数与最大正数的乘积，二者之间的最大值即为所求答案。</p>
<h1 id="大神做法1">大神做法1：</h1>
<pre><code class="language-python">class Solution:
    def maximumProduct1(self, nums: List[int]) -&gt; int:
        nums.sort()
        a = nums[-1] * nums[-2] * nums[-3]
        b = nums[0] * nums[1] * nums[-1]
        return max(a, b)
</code></pre>
]]></content>
    </entry>
</feed>